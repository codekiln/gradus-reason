webpackJsonp([1722692712455],{"./node_modules/json-loader/index.js!./.cache/json/steps-2018-02-25-variants.json":function(e,a){e.exports={data:{post:{html:'<h2 id="variants-are-case-constants-for-switch-statements"><a href="#variants-are-case-constants-for-switch-statements" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Variants are case constants for switch statements.</h2>\n<p>A Variant is a set of mutually exclusive cases to choose from.</p>\n<div class="gatsby-highlight">\n        <pre class="language-reason"><code>type speakingAnimal = Dog | Cat | Bird;\n\nlet speak = (pet) => {\n  switch (pet) {\n  | Dog => "Woof!"\n  | Cat => "Meow!"\n  | Bird => "Tweet!"\n  }\n};\n\nList.map(speak, [Dog, Cat, Bird])\n  |> List.iter(Js.log);</code></pre>\n        </div>\n<p>The expression <code>type animal = Dog | Cat | Bird</code> creates a\ncomposed type <code>animal</code> which consists of and three new types,\n<code>Dog</code>, <code>Cat</code> and <code>Bird</code>. The <code>speak</code> function has the type\n<code>(pet: speakingAnimal): string</code>, so it takes a <code>speakingAnimal</code>\nconcrete type and it produces a string.</p>\n<p>This is so common in ReasonML that there is some syntax sugar for\nmaking a function that matches based on a single argument,\nwhich is appropriately namd <code>fun</code>:</p>\n<div class="gatsby-highlight">\n        <pre class="language-reason"><code>type speakingAnimal = Dog | Cat | Bird;\n\nlet speak = fun\n  | Dog => "Woof!"\n  | Cat => "Meow!"\n  | Bird => "Tweet!";\n\nList.map(speak, [Dog, Cat, Bird])\n  |> List.iter(Js.log);</code></pre>\n        </div>\n<p>If you want to know more about this syntax, see\n<a href="https://reasonml.github.io/docs/en/comparison-to-ocaml.html#single-argument-match-functions">Single Argument Match Functions in the Reason docs</a>.</p>\n<h2 id="variantlike-legos-for-types"><a href="#variantlike-legos-for-types" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Variant—Like Legos For Types</h2>\n<p>Variants let you combine types like legos, snapping them together.</p>\n<p>The Variants above are constructed with zero parameters; <code>Dog</code>\nconstructs a <code>speakingAnimal</code> type without providing any additional\ninformation.</p>\n<p>It is also possible to declare Variants with take parameters, which\nallow for structured information to be conveyed in the type.</p>\n<p>Imagine we wanted to capture contact information, and that we had\na business rule that a person must have a primary contact\nand may have a secondary contact, and each contact method could\nbe either verified or unverified, and valid contact types include\nemail and phone. The following example lays out some types that can\nmodel this domain:</p>\n<div class="gatsby-highlight">\n        <pre class="language-reason"><code>type contactInfo =\n  | Email(string)\n  | Phone(string);\n\ntype verifiable(\'a) =\n  | Verified(\'a)\n  | Unverified(\'a);\n\n/* we can easily make an alias for a compound type */\ntype verifiableContactable = verifiable(contactInfo);\n\ntype user = {\n  name: string,\n  contact1: verifiableContactable,\n  contact2: option(verifiableContactable)\n};\n\nlet users = [\n  {\n    name: "Lisa R. Gibbons",\n    contact1: Unverified(Email("LisaRGibbons@armyspy.com")),\n    contact2: None\n  },\n  {\n    name: "Adam L. Petty",\n    contact1: Verified(Phone("208-580-5336")),\n    contact2: Some(Unverified(Email("AdamLPetty@dayrep.com")))\n  }\n];\n\nlet renderContactable =\n  fun\n  | Email(em) => "email " ++ em\n  | Phone(ph) => "phone " ++ ph;\n\nlet renderVerifiable =\n  fun\n  | Verified(info) => " (ver. " ++ renderContactable(info) ++ ")"\n  | Unverified(info) => " (unver. " ++ renderContactable(info) ++ ")";\n\nlet renderUser =\n  fun\n  | {name, contact1: c1, contact2: None} => name ++ " " ++ renderVerifiable(c1)\n  | {name, contact1: c1, contact2: Some(c2)} =>\n    name ++ " " ++ renderVerifiable(c1) ++ ", " ++ renderVerifiable(c2);\n\nList.map(renderUser, users) |> List.iter(Js.log);</code></pre>\n        </div>\n<p>In this example, the <code>contactInfo</code> variant has two type constructors.\nUnlike the <code>Dog</code> type constructor that didn\'t take any parameters,\neach <code>contactInfo</code> takes a single string as a parmeter: this means that\nyou can\'t construct an <code>Email</code> or <code>Phone</code> without providing a string.</p>\n<p>The <code>verifiable</code> variant takes a type and returns two types, one\nwhich is <code>Verified</code>, and one which is <code>Unverified</code> for that passed type.\nThe <code>verifiable</code> variant doesn\'t need to know anything about the types\nit surrounds and conveys information for.</p>\n<p>When we set up the <code>user</code> record type, we declare that <code>contact1</code> must\nbe a <code>verifiableContactable</code>, which is a type alias for either a verified\nor unverified email or phone.</p>\n<p>By using the <a href="https://reasonml.github.io/docs/en/comparison-to-ocaml.html#single-argument-match-functions">Single Argument Match Functions</a>,\nit\'s easy to construct several render functions that can print\nall the combinations of users. Try adding some users above with different\ncombinations, or changing the render format.</p>\n<p>This example also features the <a href="https://reasonml.github.io/docs/en/newcomer-examples.html#using-the-option-type"><strong>option type</strong></a>, which is quite simple and heavily used.\nThe option type represents either Some(something) or None. By representing\nan option this way, we can avoid <a href="https://en.wikipedia.org/wiki/Three-valued_logic">three valued logic</a>\nand know for sure whether something exists or not.</p>\n<h2 id="varianttrees-of-types"><a href="#varianttrees-of-types" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Variant—Trees of Types</h2>\n<p>Variants can even point to themselves, to convey a tree-like structure:</p>\n<div class="gatsby-highlight">\n        <pre class="language-reason"><code>type binary_tree =\n  | Leaf(int)\n  | Tree(binary_tree, binary_tree);\n\nlet myTree = Tree(\n    (\n        Tree(\n            (\n            Leaf(3),\n            Leaf(4)\n            )\n        ),\n        Leaf(5)\n    )\n);\n\n/**\nExercise left to user: print the tree!\n**/</code></pre>\n        </div>\n<h2 id="links"><a href="#links" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Links</h2>\n<p>Here are a few links to other sites that have discussed Variants in\nOCaml. Reminder: if you have <a href="https://github.com/reasonml/reason-tools">reason-tools</a>\ninstalled in Chrome, you can automatically convert between OCaml examples\nyou see on the web and ReasonML.</p>\n<ul>\n<li><a href="https://reasonml.github.io/docs/en/variant.html">Variants - ReasonML Docs</a></li>\n<li><a href="http://reasonmlhub.com/exploring-reasonml/ch_variants.html">Variants - <em>Exploring ReasonML</em> Book by Dr. Axel Rauschmayer</a></li>\n<li><a href="https://realworldocaml.org/v1/en/html/variants.html">Variants - Real World OCaml Book</a></li>\n<li><a href="https://ocaml.org/learn/tutorials/data_types_and_matching.html#Variants-qualified-unions-and-enums">Variants - OCaml Docs</a></li>\n<li><a href="https://haifengl.wordpress.com/2014/07/07/ocaml-algebraic-data-types/">Variants - Haifeng Li\'s blog</a></li>\n<li><a href="https://en.wikipedia.org/wiki/Enumerated_type#TypeScript"><code>enum</code> - Wikipedia</a></li>\n</ul>\n<p>Image Credit: <a href="https://www.flickr.com/photos/129679309@N05/32569599444/in/photolist-RC4Hd1-qhmqiA-bVcPXy-dYSEjP-pZq2kZ-iGgxJm-pYe764-SarC3H-V1ZZXS-S2jFSV-RD9TFL-og85Jk-e8ZH8z-SarCrZ-fAt8uA-dj84X4-fHefXD-ekbZ9d-fEdYa8-4f7tYS-e7ppLe-e77Gc9-6Ju6DB-88sE3m-aixzwa-q3Mv4v-85xzzy-omYRht-nYDooo-cCqh2d-22tvuqF-f3FnJ-nQGj9r-34gAKS-4DMuyv-bCcJcX-bCcHcR-SARC5E-pj8Yga-fNXRjJ-88pqqH-fEdZZF-qdN8Bz-dN6QcC-8Ygz59-pvifGf-BMLF4X-dx5pDh-UoeTw6-aZM6kZ"><em>CN Cabin D in Toronto, ON in September 1979</em> by Marty Bernard on Flickr</a></p>\n<p><em><a href="https://github.com/codekiln/gradus-reason/tree/master/data/steps/2018-02-25--variants/index.md">Edit this post here</a></em></p>',excerpt:"Variants are case constants for switch statements. A Variant is a set of mutually exclusive cases to choose from. The expression   creates a…",timeToRead:5,fields:{slug:"/steps/2018-02-25--variants/"},frontmatter:{tags:["variants"],author:{id:"Myer Nore",bio:"",twitter:"@MyerNore",avatar:{children:[{responsiveResolution:{src:"/static/eebd74c7dad24cbd53ab5eee2861fe0b-03c1e.jpg",srcSet:"/static/eebd74c7dad24cbd53ab5eee2861fe0b-03c1e.jpg 1x,\n/static/eebd74c7dad24cbd53ab5eee2861fe0b-95a48.jpg 1.5x,\n/static/eebd74c7dad24cbd53ab5eee2861fe0b-cc0c5.jpg 2x"}}]}},title:"Variants",updatedDate:"Feb 25, 2018",image:{children:[{responsiveResolution:{src:"/static/5dc86a763411f112f6bc01857ef6b383-936ba.jpg",srcSet:"/static/5dc86a763411f112f6bc01857ef6b383-936ba.jpg 1x,\n/static/5dc86a763411f112f6bc01857ef6b383-1afa9.jpg 1.5x,\n/static/5dc86a763411f112f6bc01857ef6b383-e5a09.jpg 2x"}}]}}},recents:{edges:[{node:{fields:{slug:"/steps/2018-03-14--modules/"},timeToRead:6,frontmatter:{title:"Modules",image:{children:[{responsiveResolution:{src:"/static/4b207212da2130c54d5d3f3c6852486b-7f526.jpg",srcSet:"/static/4b207212da2130c54d5d3f3c6852486b-7f526.jpg 1x,\n/static/4b207212da2130c54d5d3f3c6852486b-12b36.jpg 1.5x,\n/static/4b207212da2130c54d5d3f3c6852486b-f59e5.jpg 2x,\n/static/4b207212da2130c54d5d3f3c6852486b-4704a.jpg 3x"}}]},author:{id:"Myer Nore",avatar:{children:[{responsiveResolution:{src:"/static/eebd74c7dad24cbd53ab5eee2861fe0b-a469f.jpg",srcSet:"/static/eebd74c7dad24cbd53ab5eee2861fe0b-a469f.jpg 1x,\n/static/eebd74c7dad24cbd53ab5eee2861fe0b-e6d15.jpg 1.5x,\n/static/eebd74c7dad24cbd53ab5eee2861fe0b-b974e.jpg 2x,\n/static/eebd74c7dad24cbd53ab5eee2861fe0b-89580.jpg 3x"}}]}}}}},{node:{fields:{slug:"/steps/2018-03-06--maps/"},timeToRead:5,frontmatter:{title:"Maps",image:{children:[{responsiveResolution:{src:"/static/502660d3a6174f3c7a7553e0a1b971c9-7f526.jpg",srcSet:"/static/502660d3a6174f3c7a7553e0a1b971c9-7f526.jpg 1x,\n/static/502660d3a6174f3c7a7553e0a1b971c9-12b36.jpg 1.5x,\n/static/502660d3a6174f3c7a7553e0a1b971c9-f59e5.jpg 2x,\n/static/502660d3a6174f3c7a7553e0a1b971c9-4704a.jpg 3x"}}]},author:{id:"Myer Nore",avatar:{children:[{responsiveResolution:{src:"/static/eebd74c7dad24cbd53ab5eee2861fe0b-a469f.jpg",srcSet:"/static/eebd74c7dad24cbd53ab5eee2861fe0b-a469f.jpg 1x,\n/static/eebd74c7dad24cbd53ab5eee2861fe0b-e6d15.jpg 1.5x,\n/static/eebd74c7dad24cbd53ab5eee2861fe0b-b974e.jpg 2x,\n/static/eebd74c7dad24cbd53ab5eee2861fe0b-89580.jpg 3x"}}]}}}}},{node:{fields:{slug:"/steps/2018-03-02--objects/"},timeToRead:2,frontmatter:{title:"Objects",image:{children:[{responsiveResolution:{src:"/static/0a992d200e8146e849bd5350b9256aee-7f526.jpg",srcSet:"/static/0a992d200e8146e849bd5350b9256aee-7f526.jpg 1x,\n/static/0a992d200e8146e849bd5350b9256aee-12b36.jpg 1.5x,\n/static/0a992d200e8146e849bd5350b9256aee-f59e5.jpg 2x,\n/static/0a992d200e8146e849bd5350b9256aee-4704a.jpg 3x"}}]},author:{id:"Myer Nore",avatar:{children:[{responsiveResolution:{src:"/static/eebd74c7dad24cbd53ab5eee2861fe0b-a469f.jpg",srcSet:"/static/eebd74c7dad24cbd53ab5eee2861fe0b-a469f.jpg 1x,\n/static/eebd74c7dad24cbd53ab5eee2861fe0b-e6d15.jpg 1.5x,\n/static/eebd74c7dad24cbd53ab5eee2861fe0b-b974e.jpg 2x,\n/static/eebd74c7dad24cbd53ab5eee2861fe0b-89580.jpg 3x"}}]}}}}},{node:{fields:{slug:"/steps/2018-02-23--records/"},timeToRead:3,frontmatter:{title:"Records",image:{children:[{responsiveResolution:{src:"/static/08d6e8e89f98423aecffd7e6315dbf34-7f526.jpg",srcSet:"/static/08d6e8e89f98423aecffd7e6315dbf34-7f526.jpg 1x,\n/static/08d6e8e89f98423aecffd7e6315dbf34-12b36.jpg 1.5x,\n/static/08d6e8e89f98423aecffd7e6315dbf34-f59e5.jpg 2x,\n/static/08d6e8e89f98423aecffd7e6315dbf34-4704a.jpg 3x"}}]},author:{id:"Myer Nore",avatar:{children:[{responsiveResolution:{src:"/static/eebd74c7dad24cbd53ab5eee2861fe0b-a469f.jpg",srcSet:"/static/eebd74c7dad24cbd53ab5eee2861fe0b-a469f.jpg 1x,\n/static/eebd74c7dad24cbd53ab5eee2861fe0b-e6d15.jpg 1.5x,\n/static/eebd74c7dad24cbd53ab5eee2861fe0b-b974e.jpg 2x,\n/static/eebd74c7dad24cbd53ab5eee2861fe0b-89580.jpg 3x"}}]}}}}}]}},pathContext:{slug:"/steps/2018-02-25--variants/"}}}});
//# sourceMappingURL=path---steps-2018-02-25-variants-d01ec40fcc28c72d7ca2.js.map