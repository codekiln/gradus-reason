webpackJsonp([87744043175416],{"./node_modules/json-loader/index.js!./.cache/json/steps-2017-11-12-getting-started.json":function(e,a){e.exports={data:{post:{html:'<h2 id="about-gradus-reason"><a href="#about-gradus-reason" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>About Gradus Reason</h2>\n<p>Welcome to <em>Gradus Reason</em>. This site is a place to learn the <a href="https://reasonml.github.io/">Reason OCaml</a>\nlanguage.</p>\n<p>The name <em>Gradus</em> is a reference to ancient language textbooks such as\n<a href="https://en.wikipedia.org/wiki/Gradus_ad_Parnassum"><em>Gradus ad Parnassum</em></a>, which were used\nby early scholars to learn Latin and Greek. The title meant\n"Steps to Parnassus," a mountain range in Greece that was symbolically important for\nthe arts and creative activity.</p>\n<p>The posts here aim to be instructive and contain plenty of examples that mark the\nsteps of learning the language. They are particularly oriented toward those with\nno familiarity with OCaml.</p>\n<h2 id="getting-started-with-the-rtop-repl"><a href="#getting-started-with-the-rtop-repl" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Getting Started With The <code>rtop</code> REPL</h2>\n<p>When learning ReasonML, it is helpful to use <code>rtop</code> locally,\nReason\'s <strong>R</strong>ead <strong>E</strong>val <strong>P</strong>rint <strong>L</strong>oop (REPL). <code>rtop</code>\'s name comes from\nOCaml\'s <code>utop</code>, which stands for "User Toplevel," meaning, a user-interactive\ntop-level shell. Here, it\'s <code>rtop</code>, since it\'s a Reason Toplevel.</p>\n<p>To install it, <a href="https://reasonml.github.io/guide/editor-tools/global-installation/#recommended-through-npmyarn">follow the instructions in the reason guide</a>. If you\nuse yarn and have a mac, you can install it with:\n<code>yarn global add https://github.com/reasonml/reason-cli/archive/3.0.1-bin-darwin.tar.gz</code>\n. After everything is installed, you should be able to execute <code>rtop</code> in your terminal to get\nthe interactive prompt:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>$ rtop\n──────────────────┬─────────────────────────────────────────────────────────────┬──────────────────\n                  │ Welcome to utop version 2.0.1 (using OCaml version 4.02.3)! │\n                  └─────────────────────────────────────────────────────────────┘\n\n                   ___  _______   ________  _  __\n                  / _ \\/ __/ _ | / __/ __ \\/ |/ /\n                 / , _/ _// __ |_\\ \\/ /_/ /    /\n                /_/|_/___/_/ |_/___/\\____/_/|_/\n\n  Execute statements/let bindings. Hit <enter> after the semicolon. Ctrl-d to quit.\n\n        >   let myVar = "Hello Reason!";\n        >   let myList: list string = ["first", "second"];\n        >   #use "./src/myFile.re"; /* loads the file into here */\n\nType #utop_help for help about using utop.\n\nReason # 1 + 2 * 3;\n- : int = 7</code></pre>\n      </div>\n<h2 id="example-1-1--2--3"><a href="#example-1-1--2--3" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example 1: <code>1 + 2 * 3</code></h2>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>Reason # 1 + 2 * 3;\n- : int = 7</code></pre>\n      </div>\n<p>If you enter <code>1 + 2 * 3;</code> you get back the response <code>- : int = 7</code>.\nReason returns the result of the expression along with the type of the result;\nhere 7 was interpreted as an <strong>int</strong>eger. </p>\n<p>The multiplication operator <code>*</code> was performed before <code>+</code>, which means that it has\nhigher operator precedence. What if you wanted to find out about operator precedence\nin Reason? With Reason it\'s advisable to start with\n<a href="https://www.google.com/search?q=site:reasonml.github.io+precedence">doing a google site search of reasonml.github.io</a>.</p>\n<p>In this case, there aren\'t any results that explicitly show an operator precedence table,\nwhich is standard for language documentation (see, for example, the <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence">python language operator precedence</a>.) The next step would be to\ndo <a href="https://www.google.com/search?q=site:realworldocaml.org+precedence">a site search of realworldocaml.org</a>, a great book about OCaml that is available online. That would lead\nyou to <a href="https://realworldocaml.org/v1/en/html/variables-and-functions.html#table2_1">the OCaml operator precedence table</a>.</p>\n<p>This example shows how learning Reason involves searching Reason docs,\nthen searching for backup documentation on OCaml. Reason is just a syntax of OCaml,\nso it should be the same except for where Reason says it deviates.</p>\n<h2 id="tour-of-the-rtop-repl"><a href="#tour-of-the-rtop-repl" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Tour of the <code>rtop</code> REPL</h2>\n<p>Let\'s look at a few types in the REPL. First, we\'ll look at an expression that evaluates\nto a boolean:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>Reason # 50 > 60;\n- : bool = false</code></pre>\n      </div>\n<p>See also <a href="https://reasonml.github.io/guide/language/boolean">Reason docs on Booleans</a>.</p>\n<p>Here\'s an expression that evaluates to a character type: </p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>Reason # \'c\';\n- : char = \'c\'</code></pre>\n      </div>\n<p>Here\'s an example that shows how Reason is strongly typed:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>Reason # 3 + true;\nError: This expression has type bool but an expression was expected of type int</code></pre>\n      </div>\n<p>This turns out to be one of the great strengths of the language; it\'s possible to make\nabstractions that are more difficult to misuse. </p>\n<p>Next, two examples showing conditional logic. See also <a href="https://reasonml.github.io/guide/language/if-else">Reason docs on if-else</a>.</p>\n<div class="gatsby-highlight">\n        <pre class="language-reason"><code>Js.log(if (60 > 50) {0} else {1});\nJs.log(60 > 50 ? 0 : 1);</code></pre>\n        </div>\n<p>In the first, we see that in Reason if else is an <em>expression that returns a value</em>,\njust like ternary expressions. With one further example it\'s possible to see that\nin Reason, the branches of an if-else expression must return the same type: </p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>Reason # if (60 > 50) {0} else {\'c\'};\nError: This expression has type char but an expression was expected of type int</code></pre>\n      </div>\n<h2 id="to-explore"><a href="#to-explore" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>To Explore:</h2>\n<ol>\n<li>\n<p>What is the type of expression returned by each of the following?</p>\n<ol>\n<li><code>30;</code></li>\n<li><code>1000 / 100 / 10;</code></li>\n<li><code>true || false;</code></li>\n<li><code>true &#x26;&#x26; false;</code></li>\n<li><code>\'a\' + \'b\';</code></li>\n</ol>\n</li>\n<li>Consider <code>1 + 2 mod 3</code>, <code>(1 + 2) mod 3</code>, and <code>1 + (2 mod 3)</code>. What does this mean\nabout <code>+</code> vs <code>mod</code>?</li>\n<li>What are the values of <code>min_int</code> and <code>max_int</code>? What do they come from?</li>\n<li>What is the result of the expression <code>\'c\' > \'b\'</code>?</li>\n</ol>\n<p><em><a href="https://github.com/codekiln/gradus-reason/tree/master/data/steps/2017-11-12--getting-started/index.md">Edit this post here</a></em></p>',excerpt:"About Gradus Reason Welcome to  Gradus Reason . This site is a place to learn the  Reason OCaml  \nlanguage. The name  Gradus  is a reference…",timeToRead:4,fields:{slug:"/steps/2017-11-12--getting-started/"},frontmatter:{tags:["meta","rtop","conditionals","operator-precedence","booleans"],author:{id:"Myer Nore",bio:"",twitter:"@MyerNore",avatar:{children:[{responsiveResolution:{src:"/static/eebd74c7dad24cbd53ab5eee2861fe0b-03c1e.jpg",srcSet:"/static/eebd74c7dad24cbd53ab5eee2861fe0b-03c1e.jpg 1x,\n/static/eebd74c7dad24cbd53ab5eee2861fe0b-95a48.jpg 1.5x,\n/static/eebd74c7dad24cbd53ab5eee2861fe0b-cc0c5.jpg 2x"}}]}},title:"Getting Started",updatedDate:"Nov 13, 2017",image:{children:[{responsiveResolution:{src:"/static/fb7970ac16c7e5b8e902b1fb1fd53fe7-2adb3.png",srcSet:"/static/fb7970ac16c7e5b8e902b1fb1fd53fe7-2adb3.png 1x,\n/static/fb7970ac16c7e5b8e902b1fb1fd53fe7-6e8f9.png 1.5x,\n/static/fb7970ac16c7e5b8e902b1fb1fd53fe7-25736.png 2x"}}]}}},recents:{edges:[{node:{fields:{slug:"/steps/2018-03-14--modules/"},timeToRead:6,frontmatter:{title:"Modules",image:{children:[{responsiveResolution:{src:"/static/4b207212da2130c54d5d3f3c6852486b-7f526.jpg",srcSet:"/static/4b207212da2130c54d5d3f3c6852486b-7f526.jpg 1x,\n/static/4b207212da2130c54d5d3f3c6852486b-12b36.jpg 1.5x,\n/static/4b207212da2130c54d5d3f3c6852486b-f59e5.jpg 2x,\n/static/4b207212da2130c54d5d3f3c6852486b-4704a.jpg 3x"}}]},author:{id:"Myer Nore",avatar:{children:[{responsiveResolution:{src:"/static/eebd74c7dad24cbd53ab5eee2861fe0b-a469f.jpg",srcSet:"/static/eebd74c7dad24cbd53ab5eee2861fe0b-a469f.jpg 1x,\n/static/eebd74c7dad24cbd53ab5eee2861fe0b-e6d15.jpg 1.5x,\n/static/eebd74c7dad24cbd53ab5eee2861fe0b-b974e.jpg 2x,\n/static/eebd74c7dad24cbd53ab5eee2861fe0b-89580.jpg 3x"}}]}}}}},{node:{fields:{slug:"/steps/2018-03-06--maps/"},timeToRead:5,frontmatter:{title:"Maps",image:{children:[{responsiveResolution:{src:"/static/502660d3a6174f3c7a7553e0a1b971c9-7f526.jpg",srcSet:"/static/502660d3a6174f3c7a7553e0a1b971c9-7f526.jpg 1x,\n/static/502660d3a6174f3c7a7553e0a1b971c9-12b36.jpg 1.5x,\n/static/502660d3a6174f3c7a7553e0a1b971c9-f59e5.jpg 2x,\n/static/502660d3a6174f3c7a7553e0a1b971c9-4704a.jpg 3x"}}]},author:{id:"Myer Nore",avatar:{children:[{responsiveResolution:{src:"/static/eebd74c7dad24cbd53ab5eee2861fe0b-a469f.jpg",srcSet:"/static/eebd74c7dad24cbd53ab5eee2861fe0b-a469f.jpg 1x,\n/static/eebd74c7dad24cbd53ab5eee2861fe0b-e6d15.jpg 1.5x,\n/static/eebd74c7dad24cbd53ab5eee2861fe0b-b974e.jpg 2x,\n/static/eebd74c7dad24cbd53ab5eee2861fe0b-89580.jpg 3x"}}]}}}}},{node:{fields:{slug:"/steps/2018-03-02--objects/"},timeToRead:2,frontmatter:{title:"Objects",image:{children:[{responsiveResolution:{src:"/static/0a992d200e8146e849bd5350b9256aee-7f526.jpg",srcSet:"/static/0a992d200e8146e849bd5350b9256aee-7f526.jpg 1x,\n/static/0a992d200e8146e849bd5350b9256aee-12b36.jpg 1.5x,\n/static/0a992d200e8146e849bd5350b9256aee-f59e5.jpg 2x,\n/static/0a992d200e8146e849bd5350b9256aee-4704a.jpg 3x"}}]},author:{id:"Myer Nore",avatar:{children:[{responsiveResolution:{src:"/static/eebd74c7dad24cbd53ab5eee2861fe0b-a469f.jpg",srcSet:"/static/eebd74c7dad24cbd53ab5eee2861fe0b-a469f.jpg 1x,\n/static/eebd74c7dad24cbd53ab5eee2861fe0b-e6d15.jpg 1.5x,\n/static/eebd74c7dad24cbd53ab5eee2861fe0b-b974e.jpg 2x,\n/static/eebd74c7dad24cbd53ab5eee2861fe0b-89580.jpg 3x"}}]}}}}},{node:{fields:{slug:"/steps/2018-02-25--variants/"},timeToRead:5,frontmatter:{title:"Variants",image:{children:[{responsiveResolution:{src:"/static/5dc86a763411f112f6bc01857ef6b383-7f526.jpg",srcSet:"/static/5dc86a763411f112f6bc01857ef6b383-7f526.jpg 1x,\n/static/5dc86a763411f112f6bc01857ef6b383-12b36.jpg 1.5x,\n/static/5dc86a763411f112f6bc01857ef6b383-f59e5.jpg 2x,\n/static/5dc86a763411f112f6bc01857ef6b383-4704a.jpg 3x"}}]},author:{id:"Myer Nore",avatar:{children:[{responsiveResolution:{src:"/static/eebd74c7dad24cbd53ab5eee2861fe0b-a469f.jpg",srcSet:"/static/eebd74c7dad24cbd53ab5eee2861fe0b-a469f.jpg 1x,\n/static/eebd74c7dad24cbd53ab5eee2861fe0b-e6d15.jpg 1.5x,\n/static/eebd74c7dad24cbd53ab5eee2861fe0b-b974e.jpg 2x,\n/static/eebd74c7dad24cbd53ab5eee2861fe0b-89580.jpg 3x"}}]}}}}}]}},pathContext:{slug:"/steps/2017-11-12--getting-started/"}}}});
//# sourceMappingURL=path---steps-2017-11-12-getting-started-f5e8e9f80a19f6f0ecaa.js.map